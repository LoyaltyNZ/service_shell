#!/bin/bash

# Script for updating the version of a service.
# Usage: bin/version_bump
# This will update the version file, tag the new version, and push both the commit and tag to the git remote.
# In order to run to this script, your working directory must have no uncommitted and/or unpushed changes.
#
# `bin/version bump` without any arguments will generate a prerelease tag (vx.y.z-pre). You must be in a release branch to create this tag.
# `bin/version bump -f` will finalize the current version as a release tag (vx.y.z). You must be in master for this tag to be created.
# Note that final builds do not alter the VERSION file, but just create a release tag for the current version.

set -e

function version_bump {
  echo "Bumping VERSION file to $1"
  echo $1 > VERSION
  echo "VERSION file now at `cat VERSION`"
  echo "VERSION file would be at $1"
}

function commit_version_bump {
  echo "Commiting VERSION file change"
  git add VERSION
  git commit -m "Bumping version to $1"
  echo "And pushing"
  git push
}

function tag_release {
  echo "Tagging current with $1"
  git tag -a "$1" -m "version $2"
  echo "And pushing"
  git push --tags
}

function next_major {
  echo "$NEXT_MAJOR.0.0"
}

function next_minor {
  echo "$MAJOR.$NEXT_MINOR.0"
}

function next_micro {
  echo "$MAJOR.$MINOR.$NEXT_MICRO"
}

FULLRUN=true
PRERELEASE=true
while getopts ":f" opt; do
  case $opt in
    f)
      $PRERELEASE && echo "Building final release tag" >&2
      export PRERELEASE=false
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo "Use the -f flag to finalize a build"
      exit 1
      ;;
  esac
done

# https://git-scm.com/docs/git-symbolic-ref
#
# "Typically you would give HEAD as the <name> argument to see which branch
# your working tree is on."
#
BRANCH_NAME=$(git symbolic-ref --short HEAD)

# Exit early if uncommited/pushed changes exist.

REMOTE_DIFFS=$(git log origin/$BRANCH_NAME..$BRANCH_NAME)
LOCAL_DIFFS=$(git status -s)
if [[ -n $LOCAL_DIFFS ]] || [[ -n $REMOTE_DIFFS ]]; then
  echo "Exiting as there exits uncommited and/or unpushed changes"
  $FULLRUN && exit 1
fi

CURRENT_VERSION=`cat VERSION`
echo "Current version: $CURRENT_VERSION"
VERSION_ARR=(${CURRENT_VERSION//./ })
MAJOR=${VERSION_ARR[0]}
NEXT_MAJOR=$((${VERSION_ARR[0]}+1))
MINOR=${VERSION_ARR[1]}
NEXT_MINOR=$((${VERSION_ARR[1]}+1))
NEXT_MICRO=1
if [[ ${#VERSION_ARR[@]} == 3 ]]
then
  NEXT_MICRO=$((${VERSION_ARR[2]}+1))
fi

if $PRERELEASE
then
  echo $BRANCH_NAME
  if [[ ! $BRANCH_NAME =~ release/[0-9]+ ]]
  then
    echo "Exiting as version bumps must occur on release branches"
    exit 1
  fi
  read -p "Is this a ma[j]or, mi[n]or or mi[c]ro release? [c]" PATCH
  PATCH=${PATCH:-C}

  if [[ $PATCH =~ ^([jJ])$ ]]
  then
    NEXT_VERSION=$(next_major)
  elif [[ $PATCH =~ ^([nN])$ ]]
  then
    NEXT_VERSION=$(next_minor)
  elif [[ $PATCH =~ ^([cC])$ ]]
  then
    NEXT_VERSION=$(next_micro)
  else
    echo "Unexpected argument given, aborting"
    exit 1
  fi
  read -p "Enter new version number [Default $NEXT_VERSION]:" VERSION
  VERSION=${VERSION:-$NEXT_VERSION}

  TAG_NAME="v$VERSION-pre"

  version_bump $VERSION
  commit_version_bump $VERSION
  tag_release $TAG_NAME $VERSION
else
  if [[ $BRANCH_NAME != "master" ]]
  then
    echo "Exiting as releases must be finalized on master"
    exit 1
  fi
  read -p "Are you sure you want to finalize this version? [y/N]" CONFIRM
  CONFIRM=${CONFIRM:-N}
  if [[ $CONFIRM =~ ^([yY])$ ]]
  then
    TAG_NAME="v$CURRENT_VERSION"
    tag_release $TAG_NAME $CURRENT_VERSION
  else
    echo "Aborting"
  fi
fi